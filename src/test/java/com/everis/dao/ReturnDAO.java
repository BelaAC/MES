package com.everis.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;

import com.everis.model.DBReturn;
import com.everis.pages.BasePage;

public class ReturnDAO extends DBReturn {
	public static ArrayList<DBReturn> listInfoFromDBPlannedOrders() {
		ArrayList<DBReturn> returnsDB = new ArrayList<>();

		LocalDate today = LocalDate.now();
		LocalDate tomorrow = today.plusDays(1);

		String systemID = null;
		
		switch (BasePage.dataMap.get("Line")) {
		case "L501":
			systemID = "1000111";
			break;
			
		case "L505":
			systemID = "1000134";
			break;
			
		case "L506":
			systemID = "1000157";
			break;
			
		case "L521":
			systemID = "1000226";
			break;
			
		case "L511":
			systemID = "1000340";
			break;
			
		case "L536":
			systemID = "1000552";
			break;

		default:
			break;
		}
		
		try {
			new ConnectionFactory();
			Connection connection = ConnectionFactory.getConnection();
			PreparedStatement sqlCommand = connection.prepareStatement("DECLARE @SystemID int = "+systemID+";\r\n"
					+ "DECLARE @SDT datetimeoffset = '" + BasePage.dataMap.get("Date") + "T00:00:00.000-03:00';\r\n"
					+ "DECLARE @EDT datetimeoffset = '" + tomorrow + "T23:59:59.000-03:00';\r\n"
					+ "DECLARE @Locale nvarchar(1000) = N'pt-BR';\r\n" + "DECLARE @ProductID int = -1;\r\n"
					+ "DECLARE @ShowCompleted int = 0;\r\n" + "\r\n" + ";WITH d AS\r\n" + "(\r\n"
					+ "    SELECT TOP 50\r\n" + "        j.ID AS JobID,\r\n" + "        j.[Name] AS JobName,\r\n"
					+ "        j.PlannedStartDateTime,\r\n"
					+ "        DATEADD(SECOND, PlannedDurationSeconds, PlannedStartDateTime) AS PlannedEndDateTime,\r\n"
					+ "        CASE \r\n" + "            WHEN (  SELECT \r\n"
					+ "                        COUNT(jsa.ID) \r\n" + "                    FROM\r\n"
					+ "                        dbo.tJobSystemActual AS jsa \r\n" + "                    WHERE\r\n"
					+ "                        jsa.JobID = jsp.JobID AND\r\n"
					+ "                        jsa.SystemID = jsp.SystemID) > 0 THEN 1 \r\n" + "            ELSE  0\r\n"
					+ "        END AS HasRun,\r\n" + "\r\n" + " \r\n" + "\r\n" + "        CASE \r\n"
					+ "            WHEN (  SELECT TOP 1\r\n" + "                        jsa.ID\r\n"
					+ "                    FROM\r\n" + "                        dbo.tJobSystemActual AS jsa \r\n"
					+ "                    WHERE\r\n" + "                        jsa.JobID = jsp.JobID AND\r\n"
					+ "                        jsa.SystemID = jsp.SystemID AND\r\n"
					+ "                        jsa.StartDateTime IS NOT NULL AND\r\n"
					+ "                        jsa.EndDateTime IS NULL \r\n" + "                    ORDER BY \r\n"
					+ "                        jsa.ID DESC) IS NOT NULL THEN 1\r\n" + "            ELSE 0\r\n"
					+ "        END AS IsRunning,\r\n" + "\r\n" + "        (   SELECT TOP 1\r\n"
					+ "                jsa.ID \r\n" + "            FROM \r\n"
					+ "                dbo.tJobSystemActual AS jsa\r\n" + "            WHERE\r\n"
					+ "                jsa.JobID = jsp.JobID AND \r\n"
					+ "                jsa.SystemID = jsp.SystemID \r\n" + "            ORDER BY \r\n"
					+ "                jsa.ID DESC) AS lastJSAID,\r\n" + "\r\n"
					+ "        jd.PlannedProductionCountUnits,\r\n" + "\r\n" + "        CASE \r\n"
					+ "            WHEN jd.PlannedProductionCountUnits = 'Cases' THEN jd.PlannedProductionCount * CAST(ISNULL(p.Attribute04, 1) AS decimal(10, 2))\r\n"
					+ "            ELSE jd.PlannedProductionCount\r\n" + "        END AS PlannedProductionCount,\r\n"
					+ "\r\n" + "        CASE \r\n"
					+ "            WHEN jd.PlannedProductionCountUnits = 'Bottles' THEN jd.PlannedProductionCount / CAST(ISNULL(p.Attribute04, 1) AS decimal(10, 2))\r\n"
					+ "            WHEN jd.PlannedProductionCountUnits = 'Cans' THEN jd.PlannedProductionCount / CAST(ISNULL(p.Attribute04, 1) AS decimal(10, 2))\r\n"
					+ "            WHEN jd.PlannedProductionCountUnits = 'Kegs' THEN jd.PlannedProductionCount / CAST(ISNULL(p.Attribute04, 1) AS decimal(10, 2))\r\n"
					+ "            ELSE jd.PlannedProductionCount \r\n"
					+ "        END AS PlannedProductionCountPieces\r\n" + "    FROM\r\n"
					+ "        dbo.tJobSystemPlanned AS jsp \r\n" + "    LEFT OUTER JOIN \r\n"
					+ "        dbo.tJob AS j ON j.ID = jsp.JobID\r\n" + "    LEFT OUTER JOIN \r\n"
					+ "        dbo.tJobDiscrete AS jd ON jd.JobID = jsp.JobID\r\n" + "    LEFT OUTER JOIN \r\n"
					+ "        dbo.tSystem AS s ON s.ID = jsp.SystemID\r\n" + "    LEFT OUTER JOIN \r\n"
					+ "        dbo.tProduct AS p ON p.ID = j.ProductID\r\n" + "    WHERE \r\n"
					+ "        jsp.SystemID = @SystemID AND\r\n"
					+ "        j.PlannedStartDateTime BETWEEN  @SDT AND @EDT AND\r\n" + "        (\r\n"
					+ "            @ProductID = -1 OR\r\n" + "            j.ProductID = @ProductID\r\n"
					+ "        )\r\n" + ")\r\n" + "SELECT\r\n" + "    *\r\n" + "FROM\r\n" + "    d\r\n" + "WHERE\r\n"
					+ "    d.HasRun = 0 OR \r\n" + "    d.IsRunning = 1 OR \r\n" + "    (\r\n"
					+ "        @ShowCompleted = 1 AND \r\n" + "        d.HasRun = 1\r\n" + "    )\r\n" + "ORDER BY \r\n"
					+ "    d.IsRunning DESC, \r\n" + "    d.PlannedStartDateTime DESC");
			ResultSet sqlResults = sqlCommand.executeQuery();

			while (sqlResults.next()) {
				DBReturn dbreturn = new DBReturn();
				dbreturn.setDbOrderNumber(sqlResults.getString("JobName"));
				returnsDB.add(dbreturn);
			}

			sqlResults.close();
			sqlCommand.close();
			connection.close();

		} catch (SQLException e) {
			throw new RuntimeException();
		}
		return returnsDB;
	}

	public static ArrayList<DBReturn> listInfoFromDBOrdersListView() {
		ArrayList<DBReturn> returnsDB = new ArrayList<>();

		LocalDate today = LocalDate.now();
		LocalDate tomorrow = today.plusDays(1);
		LocalDate lastWeek = today.minusWeeks(1);
		
		try {
			new ConnectionFactory();
			Connection connection = ConnectionFactory.getConnection();
			PreparedStatement sqlCommand = connection.prepareStatement("DECLARE @ProductTypeID int = -1;\r\n"
					+ "DECLARE @SDT datetimeoffset = '" + lastWeek + "T00:00:00.000-03:00';\r\n"
					+ "DECLARE @EDT datetimeoffset = '" + tomorrow + "T23:59:59.000-03:00';\r\n"
					+ "DECLARE @ShowCurrent int = -1;\r\n" + "DECLARE @AID int = 6;\r\n"
					+ "DECLARE @SelectedSystems nvarchar(1000) = N'0';\r\n"
					+ "DECLARE @SelectedEquipment nvarchar(1000) = N'0';\r\n" + "DECLARE @SampleType int = -1;\r\n"
					+ "DECLARE @AreaName nvarchar(1000) = N'Packaging';\r\n" + "DECLARE @ResultType int = 0;\r\n"
					+ "DECLARE @Locale nvarchar(1000) = N'pt-BR';\r\n" + "DECLARE @CollapseEquipments bit = 0;\r\n"
					+ "\r\n" + "\r\n" + "--ResultType 0 = Data entry Compliance\r\n"
					+ "--ResultType 1 = Schedule Compliance\r\n" + "\r\n"
					+ "DECLARE @NoneText nvarchar(20) = dbo.ufz_Translate('None', @Locale)\r\n"
					+ "DECLARE @TextBehind nvarchar(20) = dbo.ufz_Translate('Behind', @Locale)\r\n"
					+ "DECLARE @TextInQueue nvarchar(20) = dbo.ufz_Translate('InQueue', @Locale)\r\n"
					+ "DECLARE @TextInProgress nvarchar(20) = dbo.ufz_Translate('InProgress', @Locale)\r\n"
					+ "DECLARE @TextComplete nvarchar(20) = dbo.ufz_Translate('Complete', @Locale)\r\n" + "\r\n"
					+ "DROP TABLE IF EXISTS #Results\r\n" + "DROP TABLE IF EXISTS #Job\r\n"
					+ "DROP TABLE IF EXISTS #PTSProcess\r\n" + "DROP TABLE IF EXISTS #PTSQuality\r\n"
					+ "DROP TABLE IF EXISTS #Samples\r\n" + "DROP TABLE IF EXISTS #MaterialActual\r\n"
					+ "DROP TABLE IF EXISTS #MaterialPlanned\r\n" + "DROP TABLE IF EXISTS #EventAcknowledge\r\n"
					+ "DROP TABLE IF EXISTS #EventCategorize\r\n" + "DROP TABLE IF EXISTS #PTSLateResults\r\n"
					+ "DROP TABLE IF EXISTS #TaskMain\r\n" + "DROP TABLE IF EXISTS #Task\r\n"
					+ "DROP TABLE IF EXISTS #MainSystems\r\n" + "DROP TABLE IF EXISTS #tArea\r\n"
					+ "DROP TABLE IF EXISTS #SampleDef\r\n" + "DROP TABLE IF EXISTS #SampDefIDs\r\n"
					+ "DROP TABLE IF EXISTS #LinkedSytem\r\n" + "DROP TABLE IF EXISTS #SampleDefParams;\r\n" + "\r\n"
					+ "\r\n" + "WITH CTE AS \r\n" + "(\r\n" + "    SELECT \r\n" + "        a.ID, \r\n"
					+ "        a.ParentAreaID\r\n" + "    FROM \r\n" + "        dbo.tArea AS a\r\n" + "    WHERE\r\n"
					+ "        a.ID = @AID\r\n" + "    \r\n" + "    UNION ALL\r\n" + "    \r\n" + "    SELECT \r\n"
					+ "        a.ID, \r\n" + "        a.ParentAreaID\r\n" + "    FROM \r\n"
					+ "        dbo.tArea AS a\r\n" + "    INNER JOIN\r\n" + "        CTE ON a.ParentAreaID = cte.ID\r\n"
					+ ")\r\n" + "SELECT \r\n" + "    CTE.ID\r\n" + "INTO \r\n" + "    #tArea\r\n" + "FROM \r\n"
					+ "    CTE\r\n" + "\r\n" + "\r\n" + "SELECT \r\n" + "    s.ID, \r\n"
					+ "    s.ID AS MainSystemID, \r\n" + "    s.TemplateParentID AS SystemTemplateID, \r\n"
					+ "    NULL AS SubSystemID, \r\n" + "    NULL AS SubSystemTemplateID\r\n" + "INTO \r\n"
					+ "    #MainSystems\r\n" + "FROM \r\n" + "    dbo.tSystem AS s\r\n" + "INNER JOIN\r\n"
					+ "    #tArea AS a ON s.AreaID = a.ID\r\n" + "WHERE\r\n"
					+ "    s.ID NOT IN (SELECT tSystem.LinkedSystemID FROM dbo.tSystem WHERE tSystem.LinkedSystemID IS NOT NULL) AND \r\n"
					+ "    s.LinkedSystemID IS NULL AND \r\n" + "    s.ParentSystemID IS NULL\r\n" + "\r\n"
					+ "UNION\r\n" + "\r\n" + "SELECT \r\n" + "    s.LinkedSystemID, \r\n" + "    s.ParentSystemID, \r\n"
					+ "    st.TemplateParentID, \r\n" + "    s.ID, \r\n" + "    s.TemplateParentID\r\n" + "FROM \r\n"
					+ "    dbo.tSystem AS s\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tSystem AS st ON s.ParentSystemID = st.ID\r\n" + "WHERE\r\n"
					+ "    s.LinkedSystemID IN (SELECT tSystem.LinkedSystemID FROM dbo.tSystem WHERE tSystem.LinkedSystemID IS NOT NULL) AND \r\n"
					+ "    s.IsTemplate = 0\r\n" + "\r\n" + "SELECT \r\n" + "    j.ID, \r\n" + "    j.[Name], \r\n"
					+ "    j.AltName AS ScadaID, \r\n" + "    j.productID AS ProductID, \r\n"
					+ "    j.PlannedStartDateTime, \r\n" + "    PlannedDurationSeconds AS PlannedDurationSeconds, \r\n"
					+ "    (SELECT TOP 1 t0.StartDateTime FROM  dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND t0.SystemID = s.ID ORDER BY t0.StartDateTime ASC) AS StartDateTime, --EarliestStart \r\n"
					+ "    (SELECT TOP 1 t0.EndDateTime FROM dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND  t0.SystemID = s.ID ORDER BY  t0.StartDateTime DESC) AS EndDateTime, --LatestEnd \r\n"
					+ "    jsa.SystemID, \r\n" + "    s.[Key]\r\n" + "INTO \r\n" + "    #Job\r\n" + "FROM \r\n"
					+ "    dbo.tJob AS j\r\n" + "INNER JOIN\r\n"
					+ "    dbo.viewJobSystemActual AS jsa ON j.ID = jsa.JobID\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tSystem AS s ON jsa.SystemID = s.ID\r\n" + "INNER JOIN\r\n"
					+ "    #MainSystems AS ms ON   s.ID = ms.MainSystemID AND \r\n"
					+ "                            ms.MainSystemID = ms.ID\r\n" + "INNER JOIN\r\n"
					+ "    #tArea AS a ON s.AreaID = a.ID\r\n" + "WHERE\r\n"
					+ "    j.UserState <> 11 AND --Cancelled Batches \r\n" + "    (\r\n"
					+ "        jsa.StartDateTimeOffset BETWEEN @SDT AND @EDT OR \r\n"
					+ "        jsa.EndDateTimeOffset BETWEEN @SDT AND @EDT OR \r\n"
					+ "        jsa.StartDateTimeOffset <= @SDT AND \r\n" + "        jsa.EndDateTimeOffset IS NULL\r\n"
					+ "    ) AND \r\n" + "    (\r\n"
					+ "        s.ID IN (SELECT * FROM dbo.ufSplitStringToIntTable(@SelectedSystems, ',')) OR \r\n"
					+ "        @SelectedSystems = '0'\r\n" + "    )\r\n" + "\r\n" + "\r\n" + "IF @ShowCurrent = 1\r\n"
					+ "BEGIN\r\n" + "    DELETE FROM\r\n" + "        #Job\r\n" + "    WHERE \r\n"
					+ "        #Job.EndDateTime IS NOT NULL\r\n" + "END\r\n" + "\r\n" + "ELSE\r\n" + "BEGIN\r\n"
					+ "    IF @ShowCurrent = 0\r\n" + "    BEGIN\r\n" + "        DELETE FROM\r\n"
					+ "            #Job\r\n" + "        WHERE \r\n" + "            #Job.EndDateTime IS NULL\r\n"
					+ "    END\r\n" + "END\r\n" + "\r\n" + "\r\n" + "SELECT \r\n" + "    link.ID, \r\n"
					+ "    link.name, \r\n" + "    link.[key], \r\n" + "    s.ParentSystemID\r\n" + "INTO \r\n"
					+ "    #LinkedSytem\r\n" + "FROM \r\n" + "    dbo.tsystem AS link\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tsystem AS s ON s.linkedsystemID = link.id\r\n" + "\r\n" + "\r\n" + "SELECT \r\n"
					+ "    COUNT(e.ID) AS EventAcknowledgeCount, \r\n" + "    e.JobID\r\n" + "INTO \r\n"
					+ "    #EventAcknowledge\r\n" + "FROM \r\n" + "    dbo.tEvent AS e\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tEventDefinition AS ed ON e.EventDefinitionID = ed.ID\r\n" + "INNER JOIN\r\n"
					+ "    #Job AS j ON    e.JobID = j.ID AND \r\n" + "                    ed.SystemID IN( SELECT \r\n"
					+ "                                        #LinkedSytem.ID\r\n"
					+ "                                    FROM \r\n"
					+ "                                        #LinkedSytem\r\n"
					+ "                                    WHERE\r\n"
					+ "                                        #LinkedSytem.ParentSystemID = j.SystemID)\r\n"
					+ "WHERE\r\n" + "    e.[state] <> 3 AND \r\n" + "    ed.ShowForAcknowledge = 1\r\n"
					+ "GROUP BY \r\n" + "    e.JobID\r\n" + "\r\n" + "\r\n" + "SELECT \r\n"
					+ "    e.JobID AS JobID, \r\n" + "    ed.SystemID AS SystemID, \r\n"
					+ "    COUNT(e.ID) AS EventCount, \r\n" + "    COUNT(CASE\r\n"
					+ "              WHEN ed.Name LIKE 'Failures%' THEN 1\r\n" + "              ELSE NULL\r\n"
					+ "          END) AS CategorizedCount\r\n" + "INTO \r\n" + "    #EventCategorize\r\n" + "FROM \r\n"
					+ "    dbo.tEvent AS e\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tEventDefinition AS ed ON e.EventDefinitionID = ed.ID\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tEventDefinitionType AS edt ON ed.EventDefinitionTypeID = edt.ID\r\n" + "INNER JOIN\r\n"
					+ "    #Job AS j ON e.JobID = j.ID\r\n" + "WHERE\r\n" + "    edt.Name LIKE '%IC%'\r\n"
					+ "GROUP BY \r\n" + "    e.JobID, \r\n" + "    ed.SystemID\r\n" + "\r\n" + "\r\n" + "SELECT \r\n"
					+ "    s.ID, \r\n" + "    ssg.ID AS SampleSubgroupID, \r\n" + "    ssg.SampleDefinitionID, \r\n"
					+ "    ssg.JobID, \r\n" + "    s.ModifiedDateTime, \r\n"
					+ "    TRY_CAST(s.Capture01 AS int) AS LabSampleID, \r\n" + "    sd.SystemID, \r\n"
					+ "    sd.SubSystemID, \r\n" + "    ISNULL(ssga.ParameterType, 0) AS ParameterType\r\n"
					+ "INTO \r\n" + "    #Samples\r\n" + "FROM \r\n" + "    dbo.tSample AS s\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tSampleSubGroup AS ssg ON s.SampleSubGroupID = ssg.ID\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tzSampleSubGroupAdditional AS ssga ON ssg.ID = ssga.SampleSubGroupID\r\n"
					+ "INNER JOIN\r\n" + "    dbo.tSampleDefinition AS sd ON ssg.SampleDefinitionID = sd.ID\r\n"
					+ "INNER JOIN\r\n" + "    #Job AS j ON ssg.JobID = j.ID\r\n" + "WHERE\r\n"
					+ "    ISNULL(s.Capture09, 0) = 0\r\n" + "\r\n" + "\r\n" + "CREATE TABLE #PTSLateResults\r\n"
					+ "(\r\n" + "    JobID int, \r\n" + "    SystemID int, \r\n" + "    SubSystemID int, \r\n"
					+ "    ParameterType int\r\n" + ")\r\n" + "\r\n" + "IF @ResultType = 1\r\n" + "BEGIN\r\n"
					+ "    INSERT INTO\r\n" + "        #PTSLateResults\r\n" + "    SELECT DISTINCT \r\n"
					+ "        #Samples.JobID, \r\n" + "        #Samples.SystemID, \r\n"
					+ "        #Samples.SubSystemID, \r\n" + "        #Samples.ParameterType\r\n" + "    FROM \r\n"
					+ "        #Samples\r\n" + "    WHERE\r\n"
					+ "        dbo.ufz_QualityProcessGetComplianceBySampleID(#Samples.ID) = 2\r\n" + "\r\n"
					+ "    DELETE FROM\r\n" + "        #Samples\r\n" + "    WHERE \r\n"
					+ "        dbo.ufz_QualityProcessGetComplianceBySampleID(#Samples.ID) = 0\r\n" + "END\r\n" + "\r\n"
					+ "\r\n" + "SELECT \r\n" + "    COUNT(*) AS PTSProcessTotal, \r\n" + "    SUM(CASE\r\n"
					+ "            WHEN s.ModifiedDateTime IS NOT NULL THEN 1\r\n" + "            ELSE 0\r\n"
					+ "        END) AS PTSProcessCompleted, \r\n" + "    s.JobID, \r\n" + "    s.SystemID, \r\n"
					+ "    s.SubSystemID,\r\n" + "    CASE\r\n" + "        WHEN l.JobID IS NULL THEN 0\r\n"
					+ "        ELSE 1\r\n" + "    END AS HasLateResults\r\n" + "INTO \r\n" + "    #PTSProcess\r\n"
					+ "FROM \r\n" + "    #Samples AS s\r\n" + "LEFT OUTER JOIN\r\n"
					+ "    #PTSLateResults AS l ON s.JobID = l.JobID AND \r\n"
					+ "                            s.ParameterType = l.ParameterType AND \r\n"
					+ "                            s.SystemID = l.SystemID AND \r\n"
					+ "                            s.SubSystemID = l.SubSystemID\r\n" + "WHERE\r\n"
					+ "    s.ParameterType = 0\r\n" + "GROUP BY \r\n" + "    s.JobID, \r\n" + "    l.JobID, \r\n"
					+ "    s.SystemID, \r\n" + "    s.SubSystemID\r\n" + "\r\n" + "\r\n" + "SELECT \r\n"
					+ "    COUNT(*) AS PTSQualityTotal, \r\n" + "    SUM(CASE\r\n"
					+ "            WHEN s.ModifiedDateTime IS NOT NULL THEN 1\r\n" + "            ELSE 0\r\n"
					+ "        END) AS PTSQualityCompleted, \r\n" + "    s.JobID, \r\n" + "    s.SystemID, \r\n"
					+ "    s.SubSystemID,\r\n" + "    CASE\r\n" + "        WHEN l.JobID IS NULL THEN 0\r\n"
					+ "        ELSE 1\r\n" + "    END AS HasLateResults\r\n" + "INTO \r\n" + "    #PTSQuality\r\n"
					+ "FROM \r\n" + "    #Samples AS s\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tzLabSample AS ls ON s.LabSampleID = ls.ID\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tzLabSampleDefinition AS lsd ON ls.LabSampleDefinitionID = lsd.ID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #PTSLateResults AS l ON s.JobID = l.JobID AND \r\n"
					+ "                            s.ParameterType = l.ParameterType AND \r\n"
					+ "                            s.SystemID = l.SystemID AND \r\n"
					+ "                            s.SubSystemID = l.SubSystemID\r\n" + "WHERE\r\n"
					+ "    s.ParameterType = 1 AND \r\n" + "    s.LabSampleID IS NOT NULL AND \r\n" + "    (\r\n"
					+ "        lsd.SampleType = @SampleType OR \r\n" + "        @SampleType = -1\r\n" + "    )\r\n"
					+ "GROUP BY \r\n" + "    s.JobID, \r\n" + "    l.JobID, \r\n" + "    s.SystemID, \r\n"
					+ "    s.SubSystemID\r\n" + "\r\n" + "\r\n" + "SELECT \r\n" + "    t1.JobID, \r\n"
					+ "    t1.SystemID, \r\n" + "    t1.SubSystemID, \r\n" + "    (\r\n" + "        SELECT \r\n"
					+ "            tSystem.ID\r\n" + "        FROM \r\n" + "            dbo.tSystem\r\n"
					+ "        WHERE\r\n" + "            tSystem.LinkedSystemID = t1.SystemID\r\n"
					+ "    ) AS SubSystem, \r\n" + "    COUNT(*) AS TaskTotal, \r\n"
					+ "    ISNULL(SUM(CASE ISNULL(t1.UserState, 0)\r\n" + "                   WHEN 3 THEN 1\r\n"
					+ "                   ELSE 0\r\n" + "               END), 0) AS TaskApproved\r\n" + "INTO \r\n"
					+ "    #TaskMain\r\n" + "FROM\r\n" + "    (\r\n" + "        SELECT \r\n"
					+ "            t.JobID, \r\n" + "            sd.SystemID, \r\n" + "            sd.SubSystemID, \r\n"
					+ "            t.UserState\r\n" + "        FROM \r\n" + "            dbo.tTask AS t\r\n"
					+ "        INNER JOIN\r\n"
					+ "            dbo.tSampleSubGroup AS ssg ON TRY_CAST(t.Capture01 AS int) = ssg.ID\r\n"
					+ "        INNER JOIN\r\n"
					+ "            dbo.tSampleDefinition AS sd ON ssg.SampleDefinitionID = sd.ID\r\n"
					+ "        INNER JOIN\r\n" + "            #Job AS j ON j.ID = t.JobID\r\n" + "\r\n"
					+ "        UNION ALL\r\n" + "\r\n" + "        SELECT \r\n" + "            t.JobID, \r\n"
					+ "            ed.SystemID, \r\n" + "            ed.SubSystemID, \r\n"
					+ "            t.UserState\r\n" + "        FROM \r\n" + "            dbo.tTask AS t\r\n"
					+ "        INNER JOIN\r\n"
					+ "            dbo.tEvent AS e ON TRY_CAST(t.Capture05 AS int) = e.ID\r\n"
					+ "        INNER JOIN\r\n"
					+ "            dbo.tEventDefinition AS ed ON e.EventDefinitionID = ed.ID\r\n"
					+ "        INNER JOIN\r\n" + "            #Job AS j ON j.ID = t.JobID\r\n" + "    ) AS t1\r\n"
					+ "GROUP BY \r\n" + "    t1.JobID, \r\n" + "    t1.SystemID, \r\n" + "    t1.SubSystemID\r\n"
					+ "\r\n" + "\r\n" + "UPDATE\r\n" + "    T2\r\n" + "SET \r\n" + "    T2.SystemID =   (\r\n"
					+ "                        SELECT \r\n" + "                            tsystem.ParentSystemID\r\n"
					+ "                        FROM \r\n" + "                            dbo.tsystem\r\n"
					+ "                        WHERE tsystem.id = T2.SubSystem\r\n" + "                    ), \r\n"
					+ "    T2.SubSystemID = T2.SubSystem\r\n" + "FROM\r\n" + "    #TaskMain T2\r\n" + "WHERE \r\n"
					+ "    T2.SubSystem IS NOT NULL\r\n" + "\r\n" + "\r\n" + "SELECT \r\n" + "    #TaskMain.JobID, \r\n"
					+ "    #TaskMain.SystemID, \r\n" + "    #TaskMain.SubSystemID, \r\n"
					+ "    SUM(#TaskMain.TaskTotal) AS TaskTotal, \r\n"
					+ "    SUM(#TaskMain.TaskApproved) AS TaskApproved\r\n" + "INTO \r\n" + "    #Task\r\n"
					+ "FROM \r\n" + "    #TaskMain\r\n" + "GROUP BY \r\n" + "    #TaskMain.JobID, \r\n"
					+ "    #TaskMain.SystemID, \r\n" + "    #TaskMain.SubSystemID\r\n" + "\r\n" + "\r\n" + "SELECT \r\n"
					+ "    t2.JobID, \r\n" + "    COUNT(t2.WithinTolerance) AS MaterialActual\r\n" + "INTO \r\n"
					+ "    #MaterialActual\r\n" + "FROM\r\n" + "    (\r\n" + "        SELECT \r\n"
					+ "            CASE\r\n" + "                WHEN mua.ActualQuantity IS NULL THEN -1\r\n"
					+ "                WHEN ABS(ABS(mua.ActualQuantity / mup.Quantity * 100) - 100) <= cm.[MATDEF.InputTolerance] THEN 1\r\n"
					+ "                ELSE 0\r\n" + "            END AS WithinTolerance, \r\n"
					+ "            mup.JobID\r\n" + "        FROM \r\n"
					+ "            dbo.tMaterialUsePlanned AS mup\r\n" + "        INNER JOIN\r\n"
					+ "            #Job AS j ON mup.JobID = j.ID\r\n" + "        INNER JOIN\r\n"
					+ "            dbo.viewCustomPropertyMaterial AS cm ON mup.MaterialID = cm.ID\r\n"
					+ "        LEFT OUTER JOIN\r\n" + "            (\r\n" + "                SELECT \r\n"
					+ "                    mua.JobID, \r\n" + "                    mua.BatchStepID, \r\n"
					+ "                    ISNULL(ma.MaterialID, mua.MaterialID) AS MaterialID, \r\n"
					+ "                    ROUND(SUM(mua.Quantity), 2) AS ActualQuantity\r\n"
					+ "                FROM \r\n" + "                    dbo.tMaterialUseActual AS mua\r\n"
					+ "                INNER JOIN\r\n" + "                    #Job AS j ON mua.JobID = j.ID\r\n"
					+ "                LEFT OUTER JOIN\r\n"
					+ "                    dbo.tMaterialAlternate AS ma ON mua.MaterialID = ma.AlternateMaterialID\r\n"
					+ "                GROUP BY \r\n" + "                    mua.JobID, \r\n"
					+ "                    mua.BatchStepID, \r\n"
					+ "                    ISNULL(ma.MaterialID, mua.MaterialID)\r\n"
					+ "            ) AS mua ON mup.MaterialID = mua.MaterialID AND \r\n"
					+ "                        mua.JobID = j.ID\r\n" + "        WHERE\r\n"
					+ "            mup.Quantity > 0.001\r\n" + "    ) AS t2\r\n" + "WHERE\r\n"
					+ "    t2.WithinTolerance = 1\r\n" + "GROUP BY \r\n" + "    t2.JobID\r\n" + "\r\n" + "\r\n"
					+ "SELECT \r\n" + "    COUNT(*) AS MaterialPlanned, \r\n" + "    j.ID AS JobID\r\n" + "INTO \r\n"
					+ "    #MaterialPlanned\r\n" + "FROM \r\n" + "    dbo.tMaterialUsePlanned AS mup\r\n"
					+ "INNER JOIN\r\n" + "    #Job AS j ON mup.JobID = j.ID\r\n" + "WHERE\r\n"
					+ "    mup.Quantity > 0.001\r\n" + "GROUP BY \r\n" + "    j.ID\r\n" + "\r\n" + "\r\n"
					+ "--Corrections for the Main Bottle Line Header\r\n" + "INSERT INTO\r\n" + "    #PTSProcess\r\n"
					+ "SELECT DISTINCT \r\n" + "    0, \r\n" + "    0, \r\n" + "    t1.JobID, \r\n"
					+ "    t1.SystemID, \r\n" + "    NULL, \r\n" + "    t1.HasLateResults\r\n" + "FROM \r\n"
					+ "    #PTSProcess AS t1\r\n" + "WHERE\r\n" + "    NOT EXISTS( SELECT \r\n"
					+ "                    t2.JobID\r\n" + "                FROM \r\n"
					+ "                    #PTSProcess AS t2\r\n" + "                WHERE\r\n"
					+ "                    t1.JobID = t2.JobID AND \r\n"
					+ "                    t1.SystemID = t2.SystemID AND \r\n"
					+ "                    t2.SubSystemID IS NULL)\r\n" + "\r\n" + "INSERT INTO\r\n"
					+ "    #PTSQuality\r\n" + "SELECT DISTINCT \r\n" + "    0, \r\n" + "    0, \r\n"
					+ "    t1.JobID, \r\n" + "    t1.SystemID, \r\n" + "    NULL, \r\n" + "    t1.HasLateResults\r\n"
					+ "FROM \r\n" + "    #PTSQuality AS t1\r\n" + "WHERE \r\n" + "    NOT EXISTS( SELECT \r\n"
					+ "                    t2.JobID\r\n" + "                FROM \r\n"
					+ "                    #PTSQuality AS t2\r\n" + "                WHERE\r\n"
					+ "                    t1.JobID = t2.JobID AND \r\n"
					+ "                    t1.SystemID = t2.SystemID AND \r\n"
					+ "                    t2.SubSystemID IS NULL)\r\n" + "\r\n" + "\r\n" + "UPDATE\r\n"
					+ "    #PTSQuality\r\n" + "SET \r\n"
					+ "    PTSQualityTotal = ISNULL(p.PTSQualityTotal, 0) + ISNULL(s.PTSQualityTotal, 0), \r\n"
					+ "    PTSQualityCompleted = ISNULL(p.PTSQualityCompleted, 0) + ISNULL(s.PTSQualityCompleted, 0)\r\n"
					+ "FROM\r\n" + "    #PTSQuality AS p\r\n" + "INNER JOIN\r\n" + "    (\r\n" + "        SELECT \r\n"
					+ "            #PTSQuality.JobID, \r\n"
					+ "            SUM(#PTSQuality.PTSQualityTotal) AS PTSQualityTotal, \r\n"
					+ "            SUM(#PTSQuality.PTSQualityCompleted) AS PTSQualityCompleted\r\n"
					+ "        FROM \r\n" + "            #PTSQuality\r\n" + "        WHERE\r\n"
					+ "            #PTSQuality.SubSystemID IS NOT NULL\r\n" + "        GROUP BY \r\n"
					+ "            #PTSQuality.JobID\r\n" + "    ) AS s ON   p.JobID = s.JobID AND \r\n"
					+ "                p.SubSystemID IS NULL\r\n" + "WHERE \r\n" + "    p.SubSystemID IS NULL\r\n"
					+ "\r\n" + "\r\n" + "UPDATE\r\n" + "    #PTSProcess\r\n" + "SET \r\n"
					+ "    PTSProcessTotal = ISNULL(p.PTSProcessTotal, 0) + ISNULL(s.PTSProcessTotal, 0), \r\n"
					+ "    PTSProcessCompleted = ISNULL(p.PTSProcessCompleted, 0) + ISNULL(s.PTSProcessCompleted, 0)\r\n"
					+ "FROM\r\n" + "    #PTSProcess AS p\r\n" + "INNER JOIN\r\n" + "    (\r\n" + "        SELECT \r\n"
					+ "            #PTSProcess.JobID, \r\n"
					+ "            SUM(#PTSProcess.PTSProcessTotal) AS PTSProcessTotal, \r\n"
					+ "            SUM(#PTSProcess.PTSProcessCompleted) AS PTSProcessCompleted\r\n"
					+ "        FROM \r\n" + "            #PTSProcess\r\n" + "        WHERE\r\n"
					+ "            #PTSProcess.SubSystemID IS NOT NULL\r\n" + "        GROUP BY \r\n"
					+ "            #PTSProcess.JobID\r\n" + "    ) AS s ON   p.JobID = s.JobID AND \r\n"
					+ "                p.SubSystemID IS NULL\r\n" + "WHERE\r\n" + "    p.SubSystemID IS NULL\r\n"
					+ "\r\n" + "\r\n" + "--Corrections for the Main Bottle Line Header \r\n" + "SELECT DISTINCT \r\n"
					+ "    j.ID AS JobID, \r\n" + "    j.Name AS JobName, \r\n" + "    j.ScadaID, \r\n"
					+ "    j.StartDateTime AS JobStartTime, \r\n" + "    j.EndDateTime AS JobEndTime, \r\n" + "\r\n"
					+ "    ISNULL((SELECT TOP 1 t0.StartDateTime FROM dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND t0.SystemID = s.ID ORDER BY t0.StartDateTime ASC), j.StartDateTime) AS StartTime,   --EarliestStart \r\n"
					+ "    ISNULL((SELECT TOP 1 t0.EndDateTime FROM dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND t0.SystemID = s.ID ORDER BY t0.StartDateTime DESC), j.EndDateTime) AS EndTime,        --LatestEnd \r\n"
					+ "\r\n" + "    DATEDIFF(SECOND, \r\n"
					+ "        ISNULL((SELECT TOP 1 t0.StartDateTime FROM dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND t0.SystemID = s.ID ORDER BY  t0.StartDateTime ASC), j.StartDateTime), \r\n"
					+ "        ISNULL((SELECT TOP 1 t0.EndDateTime FROM dbo.tJobSystemActual AS t0 WHERE t0.JobID = j.ID AND t0.SystemID = s.ID ORDER BY t0.StartDateTime DESC), j.EndDateTime)) AS Duration,\r\n"
					+ "\r\n" + "    p.Name AS ProductName, \r\n" + "    ISNULL(subs.Name, s.Name) AS SystemName, \r\n"
					+ "    s.Description AS SystemDescription, \r\n" + "    s.ID AS SystemID, \r\n"
					+ "    s.[Key] AS SystemKey, \r\n" + "    ms.SubSystemID, \r\n" + "    subs.LinkedSystemID,\r\n"
					+ "\r\n" + "    CASE\r\n" + "        WHEN (  SELECT TOP 1 \r\n" + "                    subs.ID\r\n"
					+ "                FROM \r\n" + "                    dbo.tSystem AS subs\r\n"
					+ "                WHERE\r\n" + "                    subs.LinkedSystemID = s.ID AND \r\n"
					+ "                    subs.IsTemplate = 0) IS NULL THEN REPLACE(s.[Key], ':', '_')\r\n"
					+ "        ELSE (  SELECT TOP 1 \r\n" + "                    REPLACE(ps.[Key], ':', '_')\r\n"
					+ "                FROM \r\n" + "                    dbo.tSystem AS sc\r\n"
					+ "                INNER JOIN\r\n"
					+ "                    dbo.tSystem AS ps ON sc.ParentSystemID = ps.ID\r\n"
					+ "                WHERE\r\n" + "                    sc.LinkedSystemID = s.ID AND \r\n"
					+ "                    sc.IsTemplate = 0)\r\n" + "    END AS SystemKeyURL,\r\n" + "\r\n"
					+ "    CASE\r\n"
					+ "        WHEN j.StartDateTime IS NULL AND j.PlannedStartDateTime < SYSDATETIMEOFFSET() THEN @TextBehind\r\n"
					+ "        WHEN j.StartDateTime IS NULL AND  j.PlannedStartDateTime >= SYSDATETIMEOFFSET() THEN @TextInQueue\r\n"
					+ "        WHEN j.StartDateTime IS NOT NULL AND j.EndDateTime IS NULL THEN @TextInProgress\r\n"
					+ "        WHEN j.StartDateTime IS NOT NULL AND j.EndDateTime IS NOT NULL THEN @TextComplete\r\n"
					+ "    END AS JobState, \r\n" + "\r\n" + "    j.PlannedStartDateTime AS ValueStart, \r\n"
					+ "    DATEADD(SECOND, j.plannedDurationSeconds, j.PlannedStartDateTime) AS ValueEnd, \r\n"
					+ "    j.PlannedDurationSeconds AS ValueDifference,\r\n" + "\r\n"
					+ "    CASE ISNULL(ptsp.PTSProcessTotal, 0)\r\n" + "        WHEN 0 THEN @NoneText\r\n"
					+ "        ELSE TRY_CAST(ISNULL(ROUND(CAST( ( ptsp.PTSProcessCompleted * 1.0 ) / ( ptsp.PTSProcessTotal * 1.0 ) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "    END AS PTSProcessChecks,\r\n" + "\r\n" + "    CASE ISNULL(ptsq.PTSQualityTotal, 0)\r\n"
					+ "        WHEN 0 THEN @NoneText\r\n"
					+ "        ELSE TRY_CAST(ISNULL(ROUND(CAST( ( ptsq.PTSQualityCompleted * 1.0 ) / ( ptsq.PTSQualityTotal * 1.0 ) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "    END AS PTSQualityChecks,\r\n" + "\r\n" + "    CASE\r\n"
					+ "        WHEN ms.MainSystemID <> ms.ID THEN @NoneText\r\n"
					+ "        ELSE CASE ISNULL(matp.MaterialPlanned, 0)\r\n"
					+ "                 WHEN 0 THEN @NoneText\r\n"
					+ "                 ELSE TRY_CAST(ISNULL(ROUND(CAST( ( ISNULL(mata.MaterialActual, 0) * 1.0 ) / ( ISNULL(matp.MaterialPlanned, 0) * 1.0 ) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "             END\r\n" + "    END AS MaterialChecks,\r\n" + "\r\n"
					+ "    CASE ISNULL(t.TaskTotal, 0)\r\n" + "        WHEN 0 THEN @NoneText\r\n"
					+ "        ELSE CONVERT(nvarchar(50), ISNULL(t.TaskTotal, 0) - ISNULL(t.TaskApproved, 0))\r\n"
					+ "    END AS TaskChecks,\r\n" + "\r\n" + "    CASE\r\n"
					+ "        WHEN @ResultType = 0 THEN CASE\r\n"
					+ "                                      WHEN ISNULL(ptsp.PTSProcessTotal, 0) = 0 THEN 'BlackNormal'\r\n"
					+ "                                      WHEN ISNULL(ptsp.PTSProcessTotal, 0) = ISNULL(ptsp.PTSProcessCompleted, 0) THEN 'Green'\r\n"
					+ "                                      WHEN ISNULL(ptsp.PTSProcessCompleted, 0) > 0 THEN 'Orange'\r\n"
					+ "                                      ELSE 'Red'\r\n"
					+ "                                  END\r\n" + "        WHEN @ResultType = 1 THEN CASE\r\n"
					+ "                                      WHEN ISNULL(ptsp.PTSProcessTotal, 0) = 0 THEN 'Green'\r\n"
					+ "                                      WHEN ptsp.HasLateResults = 0 THEN 'Green'\r\n"
					+ "                                      ELSE 'Red'\r\n"
					+ "                                  END\r\n" + "    END AS PTSProcessChecksColor,\r\n" + "\r\n"
					+ "    CASE\r\n" + "        WHEN @ResultType = 0 THEN CASE\r\n"
					+ "                                      WHEN ISNULL(ptsq.PTSQualityTotal, 0) = 0 THEN 'BlackNormal'\r\n"
					+ "                                      WHEN ISNULL(ptsq.PTSQualityTotal, 0) = ISNULL(ptsq.PTSQualityCompleted, 0) THEN 'Green'\r\n"
					+ "                                      WHEN ISNULL(ptsq.PTSQualityCompleted, 0) > 0 THEN 'Orange'\r\n"
					+ "                                      ELSE 'Red'\r\n"
					+ "                                  END\r\n" + "        WHEN @ResultType = 1 THEN CASE\r\n"
					+ "                                      WHEN ISNULL(ptsq.PTSQualityTotal, 0) = 0 THEN 'Green'\r\n"
					+ "                                      WHEN ptsq.HasLateResults = 0 THEN 'Green'\r\n"
					+ "                                      ELSE 'Red'\r\n"
					+ "                                  END\r\n" + "    END AS PTSQualityChecksColor,\r\n" + "\r\n"
					+ "    CASE\r\n" + "        WHEN ms.MainSystemID <> ms.ID THEN 'BlackNormal'\r\n"
					+ "        ELSE CASE\r\n"
					+ "                 WHEN ISNULL(matp.MaterialPlanned, 0) = 0 THEN 'BlackNormal'\r\n"
					+ "                 WHEN ISNULL(matp.MaterialPlanned, 0) = ISNULL(mata.MaterialActual, 0) THEN 'Green'\r\n"
					+ "                 WHEN ISNULL(mata.MaterialActual, 0) > 0 THEN 'Orange'\r\n"
					+ "                 ELSE 'Red'\r\n" + "             END\r\n" + "    END AS MaterialChecksColor,\r\n"
					+ "\r\n" + "    CASE\r\n" + "        WHEN ISNULL(t.TaskTotal, 0) = 0 THEN 'BlackNormal'\r\n"
					+ "        WHEN ISNULL(t.TaskTotal, 0) = ISNULL(t.TaskApproved, 0) THEN 'Green'\r\n"
					+ "        WHEN ISNULL(t.TaskApproved, 0) > 0 THEN 'Orange'\r\n" + "        ELSE 'Red'\r\n"
					+ "    END AS TaskChecksColor, \r\n" + "\r\n" + "    ptsp.PTSProcessTotal AS PTSProcessTotal, \r\n"
					+ "\r\n" + "    ISNULL((CAST((\r\n" + "                    SELECT \r\n"
					+ "                        COUNT(s.capture02) AS TotalGoodCount\r\n"
					+ "                    FROM \r\n" + "                        dbo.tSampleSubGroup AS sg\r\n"
					+ "                    JOIN\r\n"
					+ "                        dbo.tsample AS s ON s.sampleSubGroupId = sg.ID\r\n"
					+ "                    WHERE\r\n" + "                        s.capture02 = 'OK' AND \r\n"
					+ "                        sg.JobID = j.ID AND \r\n" + "                        j.ID <> -1\r\n"
					+ "                    GROUP BY \r\n"
					+ "                        sg.JobID) AS float) / ptsp.PTSProcessTotal) * 100, 0) AS ConformityPTS, \r\n"
					+ "\r\n" + "    ptsp.PTSProcessCompleted AS PTSProcessCompleted, \r\n"
					+ "    ptsq.PTSQualityTotal AS PTSQualityTotal, \r\n"
					+ "    ptsq.PTSQualityCompleted AS PTSQualityCompleted, \r\n"
					+ "    matp.MaterialPlanned AS MaterialPlanned, \r\n"
					+ "    mata.MaterialActual AS MaterialActual, \r\n" + "    t.TaskTotal AS TaskTotal, \r\n"
					+ "    t.TaskApproved AS TaskApproved, \r\n" + "    0 AS IsHeader, \r\n"
					+ "    CAST('Process Checks' AS nvarchar(100)) AS ProcessToolTip, \r\n" + "\r\n"
					+ "    CAST('Quality Checks (' + CASE @SampleType\r\n"
					+ "                                  WHEN -1 THEN 'All'\r\n"
					+ "                                  WHEN 1 THEN 'Production'\r\n"
					+ "                                  WHEN 2 THEN 'Laboratory' + '  samples'\r\n"
					+ "                              END + ')' AS nvarchar(100)) AS QualityToolTip, \r\n" + "\r\n"
					+ "    CAST('Materials added' AS nvarchar(100)) AS MaterialsToolTip, \r\n"
					+ "    CAST('Notifications to approve' AS nvarchar(100)) AS TaskToolTip, \r\n"
					+ "    CAST('Acknowledgements remaining' AS nvarchar(100)) AS AcknowledgementsToolTip,\r\n" + "\r\n"
					+ "    CASE\r\n"
					+ "        WHEN ms.MainSystemID = ms.ID THEN CAST(ISNULL(ea.EventAcknowledgeCount, 0) AS nvarchar(100))\r\n"
					+ "        ELSE 0\r\n" + "    END AS EventAcknowledgeCount,\r\n" + "\r\n" + "    CASE\r\n"
					+ "        WHEN ms.MainSystemID <> ms.ID THEN 'BlackNormal'\r\n" + "        ELSE CASE\r\n"
					+ "                 WHEN ISNULL(ea.EventAcknowledgeCount, 0) = 0 THEN 'Green'\r\n"
					+ "                 ELSE 'Red'\r\n" + "             END\r\n"
					+ "    END AS EventAcknowledgeCountColor,\r\n" + "\r\n" + "    CASE\r\n"
					+ "        WHEN ms.MainSystemID = ms.ID THEN SUM(ISNULL(ec.CategorizedCount, 0)) OVER(PARTITION BY j.ID, s.ID) * 100.0 / SUM(ISNULL(ec.EventCount, 1)) OVER(PARTITION BY j.ID)\r\n"
					+ "        ELSE ISNULL(ecSubs.CategorizedCount, 0) * 100.0 / ISNULL(ecSubs.EventCount, 1)\r\n"
					+ "    END AS EventCategorizedPercent, \r\n" + "\r\n"
					+ "    ptsp.HasLateResults AS PTSPHasLateResults, \r\n"
					+ "    ptsq.HasLateResults AS PTSQHasLateResults\r\n" + "INTO \r\n" + "    #Results\r\n"
					+ "FROM \r\n" + "    #Job AS j\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tProduct AS p ON j.ProductID = p.ID\r\n" + "INNER JOIN\r\n"
					+ "    dbo.tSystem AS s ON j.SystemID = s.ID\r\n" + "INNER JOIN\r\n"
					+ "    #tArea AS a ON s.AreaID = a.ID\r\n" + "INNER JOIN\r\n"
					+ "    #MainSystems AS ms ON s.ID = ms.MainSystemID\r\n" + "LEFT OUTER JOIN\r\n"
					+ "    dbo.tSystem AS subs ON ms.SubSystemID = subs.ID\r\n" + "LEFT OUTER JOIN\r\n"
					+ "    #PTSProcess AS ptsp ON  ptsp.JobID = j.ID AND \r\n"
					+ "                            ptsp.SystemID IN(ms.MainSystemID, ms.SystemTemplateID) AND \r\n"
					+ "                            ISNULL(ptsp.SubSystemID, 0) IN(ISNULL(ms.SubSystemID, 0), ISNULL(ms.SubSystemTemplateID, 0))\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #PTSQuality AS ptsq ON  ptsq.JobID = j.ID AND \r\n"
					+ "                            ptsq.SystemID IN(ms.MainSystemID, ms.SystemTemplateID) AND \r\n"
					+ "                            ISNULL(ptsq.SubSystemID, 0) IN(ISNULL(ms.SubSystemID, 0), ISNULL(ms.SubSystemTemplateID, 0))\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #MaterialPlanned AS matp ON matp.JobID = j.ID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #MaterialActual AS mata ON mata.JobID = j.ID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #EventAcknowledge AS ea ON ea.JobID = j.ID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #EventCategorize AS ec ON ec.JobID = j.ID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #EventCategorize AS ecSubs ON   ecSubs.JobID = j.ID AND \r\n"
					+ "                                    ecSubs.SystemID = subs.LinkedSystemID\r\n"
					+ "LEFT OUTER JOIN\r\n" + "    #Task AS t ON   t.JobID = j.ID AND \r\n"
					+ "                    t.SystemID = ms.MainSystemID AND \r\n"
					+ "                    ISNULL(t.SubSystemID, 0) = ISNULL(ms.SubSystemID, 0)\r\n" + "WHERE\r\n"
					+ "    s.ParentSystemID IS NULL AND \r\n" + "    @ProductTypeID IN (-1, p.ProductTypeID) AND \r\n"
					+ "    (\r\n"
					+ "        s.ID IN (SELECT * FROM  dbo.ufSplitStringToIntTable(@SelectedSystems, ',')) OR \r\n"
					+ "        @SelectedSystems = '0'\r\n" + "    ) AND \r\n" + "    (\r\n"
					+ "        subs.Name IN (SELECT * FROM dbo.ufSplitStringToTable(@SelectedEquipment, ',')) OR \r\n"
					+ "        @SelectedEquipment = '0'\r\n" + "    )\r\n" + "ORDER BY \r\n"
					+ "    j.StartDateTime DESC, \r\n" + "    j.EndDateTime DESC\r\n" + "\r\n" + "\r\n"
					+ "--If SubEquipment was selected in the filter (Look at where clause)\r\n"
					+ "IF @SelectedEquipment != '0'\r\n" + "BEGIN\r\n" + "    INSERT INTO\r\n" + "        #Results\r\n"
					+ "    (\r\n" + "        JobID, \r\n" + "        JobName, \r\n" + "        ScadaID, \r\n"
					+ "        ProductName, \r\n" + "        SystemID, \r\n" + "        SystemDescription, \r\n"
					+ "        SystemKey, \r\n" + "        SystemName, \r\n" + "        ConformityPTS, \r\n"
					+ "        PTSProcessChecks, \r\n" + "        PTSQualityChecks, \r\n"
					+ "        MaterialChecks, \r\n" + "        TaskChecks, \r\n"
					+ "        PTSProcessChecksColor, \r\n" + "        PTSQualityChecksColor, \r\n"
					+ "        MaterialChecksColor, \r\n" + "        TaskChecksColor, \r\n"
					+ "        EventAcknowledgeCountColor, \r\n" + "        IsHeader, \r\n"
					+ "        ProcessToolTip, \r\n" + "        QualityToolTip, \r\n" + "        MaterialsToolTip, \r\n"
					+ "        TaskToolTip, \r\n" + "        EventAcknowledgeCount, \r\n"
					+ "        AcknowledgementsToolTip, \r\n" + "        EventCategorizedPercent\r\n" + "    )\r\n"
					+ "    SELECT\r\n" + "        -1, \r\n" + "        '', \r\n" + "        '', \r\n"
					+ "        '', \r\n" + "        -1, \r\n" + "        '', \r\n" + "        '', \r\n"
					+ "        @AreaName AS SystemName, \r\n" + "        ConformityPTS,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(PTSProcessTotal), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSProcessCompleted * 1.0) / SUM(PTSProcessTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS PTSProcessChecks,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(PTSQualityTotal), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSQualityCompleted * 1.0) / SUM(PTSQualityTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS PTSQualityChecks,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(MaterialPlanned), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(MaterialActual * 1.0) / SUM(MaterialPlanned * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS MaterialChecks,\r\n" + "\r\n" + "        CASE ISNULL(SUM(TaskTotal), 0)\r\n"
					+ "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE CONVERT(nvarchar(50), ISNULL(SUM(TaskTotal), 0) - ISNULL(SUM(TaskApproved), 0))\r\n"
					+ "        END AS TaskChecks, \r\n" + "\r\n"
					+ "        'BlackHeader' AS PTSProcessChecksColor, \r\n"
					+ "        'BlackHeader' AS PTSQualityChecksColor, \r\n"
					+ "        'BlackHeader' AS MaterialChecksColor, \r\n"
					+ "        'BlackHeader' AS TaskChecksColor, \r\n"
					+ "        'BlackHeader' AS EventAcknowledgeCountColor, \r\n" + "        1 AS IsHeader, \r\n"
					+ "        'Average Process Checks' AS ProcessToolTip, \r\n" + "\r\n"
					+ "        'Average Quality Checks (' + CASE @SampleType\r\n"
					+ "                                         WHEN -1 THEN 'All'\r\n"
					+ "                                         WHEN 1 THEN 'Production'\r\n"
					+ "                                         WHEN 2 THEN 'Laboratory' + '  samples'\r\n"
					+ "                                     END + ')' AS QualityToolTip, \r\n" + "\r\n"
					+ "        'Average Materials added' AS MaterialsToolTip, \r\n"
					+ "        'Average Notifications to approve' AS TaskToolTip,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(CASE WHEN ISNUMERIC(EventAcknowledgeCount) = 1 THEN CAST(EventAcknowledgeCount AS int) ELSE 0 END), 0)\r\n"
					+ "            WHEN 0 THEN 0\r\n"
					+ "            ELSE CAST(ISNULL(SUM(CASE WHEN ISNUMERIC(EventAcknowledgeCount) = 1 THEN CAST(EventAcknowledgeCount AS int) ELSE 0 END), 0) AS nvarchar(100))\r\n"
					+ "        END, \r\n" + "\r\n" + "        'Total Acknowledgements remaining', \r\n"
					+ "        AVG(EventCategorizedPercent)\r\n" + "    FROM \r\n" + "        #Results\r\n"
					+ "    WHERE\r\n" + "        #Results.SubSystemID IS NOT NULL\r\n" + "    GROUP BY \r\n"
					+ "        #Results.ConformityPTS\r\n" + "END\r\n" + "\r\n"
					+ "    --If NO SubEquipment was selected in the filter (Look at where clause)\r\n" + "    ELSE\r\n"
					+ "BEGIN\r\n" + "    INSERT INTO\r\n" + "        #Results\r\n" + "    (\r\n" + "        JobID, \r\n"
					+ "        JobName, \r\n" + "        ScadaID, \r\n" + "        ProductName, \r\n"
					+ "        SystemID, \r\n" + "        SystemDescription, \r\n" + "        SystemKey, \r\n"
					+ "        SystemName, \r\n" + "        ConformityPTS, \r\n" + "        PTSProcessChecks, \r\n"
					+ "        PTSQualityChecks, \r\n" + "        MaterialChecks, \r\n" + "        TaskChecks, \r\n"
					+ "        PTSProcessChecksColor, \r\n" + "        PTSQualityChecksColor, \r\n"
					+ "        MaterialChecksColor, \r\n" + "        TaskChecksColor, \r\n"
					+ "        EventAcknowledgeCountColor, \r\n" + "        IsHeader, \r\n"
					+ "        ProcessToolTip, \r\n" + "        QualityToolTip, \r\n" + "        MaterialsToolTip, \r\n"
					+ "        TaskToolTip, \r\n" + "        EventAcknowledgeCount, \r\n"
					+ "        AcknowledgementsToolTip, \r\n" + "        EventCategorizedPercent\r\n" + "    )\r\n"
					+ "    SELECT\r\n" + "        -1, \r\n" + "        '', \r\n" + "        '', \r\n"
					+ "        '', \r\n" + "        -1, \r\n" + "        '', \r\n" + "        '', \r\n"
					+ "        @AreaName AS SystemName, \r\n" + "        ConformityPTS,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(PTSProcessTotal), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSProcessCompleted * 1.0) / SUM(PTSProcessTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS PTSProcessChecks,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(PTSQualityTotal), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSQualityCompleted * 1.0) / SUM(PTSQualityTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS PTSQualityChecks,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(MaterialPlanned), 0)\r\n" + "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(MaterialActual * 1.0) / SUM(MaterialPlanned * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%'\r\n"
					+ "        END AS MaterialChecks,\r\n" + "\r\n" + "        CASE ISNULL(SUM(TaskTotal), 0)\r\n"
					+ "            WHEN 0 THEN @NoneText\r\n"
					+ "            ELSE CONVERT(nvarchar(50), ISNULL(SUM(TaskTotal), 0) - ISNULL(SUM(TaskApproved), 0))\r\n"
					+ "        END AS TaskChecks, \r\n" + "\r\n"
					+ "        'BlackHeader' AS PTSProcessChecksColor, \r\n"
					+ "        'BlackHeader' AS PTSQualityChecksColor, \r\n"
					+ "        'BlackHeader' AS MaterialChecksColor, \r\n"
					+ "        'BlackHeader' AS TaskChecksColor, \r\n"
					+ "        'BlackHeader' AS EventAcknowledgeCountColor, \r\n" + "        1 AS IsHeader, \r\n"
					+ "        'Average Process Checks' AS ProcessToolTip, \r\n" + "\r\n"
					+ "        'Average Quality Checks (' + CASE @SampleType\r\n"
					+ "                                         WHEN -1 THEN 'All'\r\n"
					+ "                                         WHEN 1 THEN 'Production'\r\n"
					+ "                                         WHEN 2 THEN 'Laboratory' + '  samples'\r\n"
					+ "                                     END + ')' AS QualityToolTip, \r\n" + "\r\n"
					+ "        'Average Materials added' AS MaterialsToolTip, \r\n"
					+ "        'Average Notifications to approve' AS TaskToolTip,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(CASE WHEN ISNUMERIC(EventAcknowledgeCount) = 1 THEN CAST(EventAcknowledgeCount AS int) ELSE 0 END), 0)\r\n"
					+ "            WHEN 0 THEN 0\r\n" + "            ELSE CAST(ISNULL(SUM(CASE\r\n"
					+ "                                     WHEN ISNUMERIC(EventAcknowledgeCount) = 1 THEN CAST(EventAcknowledgeCount AS int)\r\n"
					+ "                                     ELSE 0\r\n"
					+ "                                 END), 0) AS nvarchar(100))\r\n" + "        END, \r\n" + "\r\n"
					+ "        'Total Acknowledgements remaining', \r\n" + "        AVG(EventCategorizedPercent)\r\n"
					+ "    FROM \r\n" + "        #Results\r\n" + "    WHERE\r\n"
					+ "        #Results.SubSystemID IS NULL\r\n" + "    GROUP BY \r\n"
					+ "        #Results.ConformityPTS\r\n" + "END\r\n" + "\r\n" + "IF @CollapseEquipments = 1\r\n"
					+ "BEGIN\r\n" + "    SELECT \r\n" + "        *,\r\n"
					+ "        CASE r.IsHeader WHEN 0 THEN 1 ELSE 0 END AS IsNotHeader,\r\n"
					+ "        CASE r.IsHeader WHEN 1 THEN 'Header' ELSE '' END AS RowCss\r\n" + "    FROM \r\n"
					+ "        #Results AS r\r\n" + "    WHERE\r\n"
					+ "        (r.SubSystemID IS NULL OR @CollapseEquipments = 1 ) AND \r\n"
					+ "        r.JobID <> -1 AND \r\n" + "        r.SystemName <> 'Packaging'\r\n" + "    ORDER BY \r\n"
					+ "        IsNotHeader, \r\n" + "        r.ScadaID DESC, \r\n" + "        r.StartTime DESC, \r\n"
					+ "        r.EndTime DESC,\r\n" + "        CASE WHEN r.SubSystemID IS NULL THEN 0 ELSE 1 END\r\n"
					+ "END\r\n" + "\r\n" + "ELSE\r\n" + "BEGIN\r\n" + "    SELECT \r\n" + "        JobID, \r\n"
					+ "        JobName, \r\n" + "        ScadaID, \r\n" + "        JobStartTime, \r\n"
					+ "        JobEndTime, \r\n" + "        StartTime, \r\n" + "        EndTime, \r\n"
					+ "        Duration, \r\n" + "        ProductName, \r\n"
					+ "        (SELECT [Name] FROM dbo.tSystem WHERE tSystem.ID = r.SystemID) AS SystemName, \r\n"
					+ "        SystemDescription, \r\n" + "        SystemID, \r\n" + "        SystemKey, \r\n"
					+ "        NULL AS SubSystemID, \r\n" + "        NULL AS LinkSystemID, \r\n"
					+ "        SystemKeyURL, \r\n" + "        JobState, \r\n" + "        ValueStart, \r\n"
					+ "        ValueEnd, \r\n" + "        ValueDifference,\r\n" + "\r\n"
					+ "        CASE ISNULL(SUM(PTSProcessTotal), 0) WHEN 0 THEN @NoneText ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSProcessCompleted * 1.0) / SUM(PTSProcessTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%' END AS PTSProcessChecks,\r\n"
					+ "        CASE ISNULL(SUM(PTSQualityTotal), 0) WHEN 0 THEN @NoneText ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(PTSQualityCompleted * 1.0) / SUM(PTSQualityTotal * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%' END AS PTSQualityChecks,\r\n"
					+ "        CASE ISNULL(SUM(MaterialPlanned), 0) WHEN 0 THEN @NoneText ELSE TRY_CAST(ISNULL(ROUND(CAST(SUM(MaterialActual * 1.0) / SUM(MaterialPlanned * 1.0) * 100 AS float), 2), 0) AS nvarchar(100)) + '%' END AS MaterialChecks,\r\n"
					+ "        CASE ISNULL(SUM(TaskTotal), 0) WHEN 0 THEN @NoneText ELSE CONVERT(nvarchar(50), ISNULL(SUM(TaskTotal), 0) - ISNULL(SUM(TaskApproved), 0)) END AS TaskChecks,\r\n"
					+ "\r\n" + "        CASE\r\n" + "            WHEN @ResultType = 0 THEN CASE\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSProcessTotal), 0) = 0 THEN 'BlackNormal'\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSProcessTotal), 0) = ISNULL(SUM(PTSProcessCompleted), 0) THEN 'Green'\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSProcessCompleted), 0) > 0 THEN 'Orange'\r\n"
					+ "                                          ELSE 'Red'\r\n"
					+ "                                      END\r\n" + "            WHEN @ResultType = 1 THEN CASE\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSProcessTotal), 0) = 0 THEN 'Green'\r\n"
					+ "                                          WHEN ISNULL(PTSPHasLateResults, 0) = 0 THEN 'Green'\r\n"
					+ "                                          ELSE 'Red'\r\n"
					+ "                                      END\r\n" + "        END AS PTSProcessChecksColor,\r\n"
					+ "\r\n" + "        CASE\r\n" + "            WHEN @ResultType = 0 THEN CASE\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSQualityTotal), 0) = 0 THEN 'BlackNormal'\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSQualityTotal), 0) = ISNULL(SUM(PTSQualityCompleted), 0) THEN 'Green'\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSQualityCompleted), 0) > 0 THEN 'Orange'\r\n"
					+ "                                          ELSE 'Red'\r\n"
					+ "                                      END\r\n" + "            WHEN @ResultType = 1 THEN CASE\r\n"
					+ "                                          WHEN ISNULL(SUM(PTSQualityTotal), 0) = 0 THEN 'Green'\r\n"
					+ "                                          WHEN ISNULL(PTSQHasLateResults, 0) = 0 THEN 'Green'\r\n"
					+ "                                          ELSE 'Red'\r\n"
					+ "                                      END\r\n" + "        END AS PTSQualityChecksColor,\r\n"
					+ "\r\n" + "        CASE\r\n"
					+ "            WHEN SUM(ISNULL(MaterialPlanned, 0)) = 0 THEN 'BlackNormal'\r\n"
					+ "            WHEN SUM(ISNULL(MaterialPlanned, 0)) = SUM(ISNULL(MaterialActual, 0)) THEN 'Green'\r\n"
					+ "            WHEN SUM(ISNULL(MaterialActual, 0)) > 0 THEN 'Orange'\r\n"
					+ "            ELSE 'Red'\r\n" + "        END AS MaterialChecksColor,\r\n" + "\r\n"
					+ "        CASE\r\n" + "            WHEN ISNULL(SUM(TaskTotal), 0) = 0 THEN 'BlackNormal'\r\n"
					+ "            WHEN ISNULL(SUM(TaskTotal), 0) = ISNULL(SUM(TaskApproved), 0) THEN 'Green'\r\n"
					+ "            WHEN ISNULL(SUM(TaskApproved), 0) > 0 THEN 'Orange'\r\n"
					+ "            ELSE 'Red'\r\n" + "        END AS TaskChecksColor, \r\n" + "\r\n"
					+ "        SUM(ISNULL(PTSProcessTotal, 0)) AS PTSProcessTotal, \r\n" + "\r\n"
					+ "        ROUND(ISNULL((CAST((    SELECT \r\n"
					+ "                                    COUNT(s.capture02) AS TotalGoodCount\r\n"
					+ "                                FROM \r\n"
					+ "                                    dbo.tSampleSubGroup AS sg\r\n"
					+ "                                JOIN\r\n"
					+ "                                    dbo.tsample AS s ON s.sampleSubGroupId = sg.ID\r\n"
					+ "                                WHERE\r\n"
					+ "                                    s.capture02 = 'OK' AND \r\n"
					+ "                                    sg.JobID = r.JobID AND \r\n"
					+ "                                    sg.JobID <> -1\r\n"
					+ "                            ) AS decimal) / SUM(PTSProcessTotal)) * 100, 2), 0) AS ConformityPTS, \r\n"
					+ "\r\n" + "        SUM(ISNULL(PTSProcessCompleted, 0)) AS PTSProcessCompleted, \r\n"
					+ "        SUM(ISNULL(PTSQualityTotal, 0)) AS PTSQualityTotal, \r\n"
					+ "        SUM(ISNULL(PTSQualityCompleted, 0)) AS PTSQualityCompleted, \r\n"
					+ "        MaterialPlanned, \r\n" + "        MaterialActual, \r\n"
					+ "        SUM(ISNULL(TaskTotal, 0)) AS TaskTotal, \r\n"
					+ "        SUM(ISNULL(TaskApproved, 0)) AS TaskApproved, \r\n" + "        IsHeader, \r\n"
					+ "        ProcessToolTip, \r\n" + "        QualityToolTip, \r\n" + "        MaterialsToolTip, \r\n"
					+ "        TaskToolTip, \r\n" + "        AcknowledgementsToolTip, \r\n"
					+ "        SUM(EventAcknowledgeCount) AS EventAcknowledgeCount,\r\n"
					+ "        CASE WHEN SUM(ISNULL(EventAcknowledgeCount, 0)) = 0 THEN 'Green' ELSE 'Red' END AS EventAcknowledgeCountColor, \r\n"
					+ "        AVG(EventCategorizedPercent) AS EventCategorizedPercent,\r\n"
					+ "        CASE IsHeader WHEN 0 THEN 1 ELSE 0 END AS IsNotHeader,\r\n"
					+ "        CASE IsHeader WHEN 1 THEN 'Header' ELSE '' END AS RowCss\r\n" + "    FROM \r\n"
					+ "        #Results AS r\r\n" + "    WHERE\r\n" + "        r.JobID <> -1 AND \r\n"
					+ "        r.SystemName <> 'Packaging'\r\n" + "    GROUP BY \r\n" + "        r.JobID, \r\n"
					+ "        r.JobName, \r\n" + "        r.ScadaID, \r\n" + "        r.JobStartTime, \r\n"
					+ "        r.JobEndTime, \r\n" + "        r.StartTime, \r\n" + "        r.EndTime, \r\n"
					+ "        r.Duration, \r\n" + "        r.ProductName, \r\n" + "        r.SystemKey, \r\n"
					+ "        r.SystemDescription, \r\n" + "        r.SystemKeyURL, \r\n" + "        r.JobState, \r\n"
					+ "        r.ValueStart, \r\n" + "        r.ValueEnd, \r\n" + "        r.ValueDifference, \r\n"
					+ "        r.SystemID, \r\n" + "        r.MaterialPlanned, \r\n" + "        r.MaterialActual, \r\n"
					+ "        r.IsHeader, \r\n" + "        ISNULL(r.PTSQHasLateResults, 0), \r\n"
					+ "        ISNULL(r.PTSPHasLateResults, 0), \r\n" + "        r.ProcessToolTip, \r\n"
					+ "        r.QualityToolTip, \r\n" + "        r.MaterialsToolTip, \r\n"
					+ "        r.TaskToolTip, \r\n" + "        r.AcknowledgementsToolTip --, ConformityPTS\r\n"
					+ "    ORDER BY \r\n" + "        IsNotHeader, \r\n" + "        r.StartTime DESC, \r\n"
					+ "        r.EndTime DESC\r\n" + "\r\n" + "END\r\n" + "\r\n" + "\r\n" + "DROP TABLE #Results\r\n"
					+ "DROP TABLE #Job\r\n" + "DROP TABLE #PTSProcess\r\n" + "DROP TABLE #PTSQuality\r\n"
					+ "DROP TABLE #Samples\r\n" + "DROP TABLE #MaterialActual\r\n" + "DROP TABLE #MaterialPlanned\r\n"
					+ "DROP TABLE #EventAcknowledge\r\n" + "DROP TABLE #EventCategorize\r\n"
					+ "DROP TABLE #PTSLateResults\r\n" + "DROP TABLE #TaskMain\r\n" + "DROP TABLE #Task\r\n"
					+ "DROP TABLE #MainSystems\r\n" + "DROP TABLE #tArea\r\n" + "DROP TABLE #LinkedSytem");
			ResultSet sqlResults = sqlCommand.executeQuery();

			while (sqlResults.next()) {
				DBReturn dbreturn = new DBReturn();
				dbreturn.setDbOrderNumber(sqlResults.getString("JobName"));
				returnsDB.add(dbreturn);
			}

			sqlResults.close();
			sqlCommand.close();
			connection.close();

		} catch (SQLException e) {
			throw new RuntimeException();
		}
		return returnsDB;
	}
}
